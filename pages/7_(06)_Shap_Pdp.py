import streamlit as st
import pandas as pd
import numpy as np
import pickle

from sklearn.model_selection import train_test_split, StratifiedKFold, KFold, GroupKFold, GroupShuffleSplit
from sklearn.metrics import roc_auc_score, mean_squared_error, average_precision_score
import lightgbm as lgb
# –ù–∞—à–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
# –ù–∞—à–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
from autobinary import SentColumns, CatBoostEncoder, PermutationSelection, base_pipe, PlotShap, PlotPDP

st.set_option('deprecation.showPyplotGlobalUse', False)

st.set_page_config(page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", page_icon="üéâ")

st.markdown("# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
st.markdown("### üëà –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

useful_columns = pickle.load(open('./output/columns_after_optuna.sav','rb'))
features = useful_columns['features']
num_columns = useful_columns['num_columns']
cat_columns = useful_columns['cat_columns']
target = useful_columns['target']

prep_pipe = pickle.load(open('./final_results/prep_pipe_final.sav','rb'))

model = pickle.load(open('./final_results/model_final.sav','rb'))

def load_dataset(data_link):
    dataset = pd.read_csv(data_link)
    return dataset

def user_params(features):

    test_size = st.sidebar.slider('–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç—Ä–µ–π–Ω-—Ç–µ—Å—Ç', 0.1,1.0,0.3)
    random_state = st.sidebar.slider('–§–∞–∫—Ç–æ—Ä —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è (random_state)', 1,100,42)

    train_test_params = {'test_size':test_size,
                        'random_state':random_state}

    top_feat = st.sidebar.slider('–ß–∏—Å–ª–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏', 1,len(features),1)

    percent_sample = st.sidebar.slider('–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–∞ PDP', 0.15,1.0,0.3)

    type_selection = [True,False,'–≤—ã–±—Ä–∞—Ç—å']
    ind = type_selection.index('–≤—ã–±—Ä–∞—Ç—å')
    save_report = st.sidebar.selectbox("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç—ã", type_selection, index=ind)

    report_params = {'top_feat':top_feat,
                     'percent_sample':percent_sample,
                     'save_report':save_report}

    return train_test_params, report_params

train_test_params, report_params = user_params(features)

st.write('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤: ', len(features))
st.write('–û—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: ', features)

link_6 = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç')
if link_6 == '':
    st.write('–î–∞—Ç–∞—Å–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω')
    st.stop()
else:
    sample = load_dataset(link_6)
    st.write('–î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω')

if st.button('–°—Ç–∞—Ä—Ç –æ–±—É—á–µ–Ω–∏—è'):
    st.markdown('# –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω!')

    st.write('### –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ–±—É—á–∞—é—â–µ–µ –∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏:',
    1-train_test_params['test_size'],'-',train_test_params['test_size'])

    X_train, X_valid, y_train, y_valid = train_test_split(
        sample,
        sample[target],
        test_size=train_test_params['test_size'],
        stratify=sample[target],
        random_state=train_test_params['random_state']
    )

    st.write(" * –†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞: ", len(X_train))
    st.write("---")

    X_train = prep_pipe.transform(X_train[features])

    # –∑–∞–¥–∞–µ–º –∫–ª–∞—Å—Å
    c_shap = PlotShap(model=model, sample=X_train)
    # –æ–±—É—á–∞–µ–º
    c_shap.fit_shap()

    st.markdown("#### Shap Importance –¥–ª—è –æ–±—É—á–∞—é—â–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞")
    c_shap.create_plot_shap(plot_type='bar', number_features=report_params['top_feat'])
    st.pyplot(bbox_inches='tight')
    st.write('---')

    if report_params['save_report']:
        c_shap.create_shap_report(path_base='./final_results/shap_report')
        st.write('–û—Ç—á–µ—Ç Shap —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
    else:
        st.write('–û—Ç—á–µ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')

    feats = pd.DataFrame({'imp':model.feature_importances_,'feat':features}).sort_values('imp', ascending=False).feat.tolist()
    pdp_num_columns = list(filter(lambda x: x in num_columns, feats))
    st.markdown("#### PDP plot –¥–ª—è –æ–±—É—á–∞—é—â–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞")
    pdp_plot = PlotPDP(model=model,X=X_train,main_features=pdp_num_columns)
    pdp_plot.create_feature_plot(save=report_params['save_report'], frac_to_plot=report_params['percent_sample'], path='./final_results/pdp_report')
    st.pyplot(bbox_inches='tight')
    st.write('---')

    if report_params['save_report']:
        pdp_plot.create_pdp_report(path_base='./final_results/pdp_report')
        st.write('–û—Ç—á–µ—Ç PDP —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
    else:
        st.write('–û—Ç—á–µ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')

    st.write('### –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω! ‚úÖ')

st.button("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
