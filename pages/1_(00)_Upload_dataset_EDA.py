import streamlit as st
import pandas as pd
import numpy as np
import pickle

# –ù–∞—à–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
from autobinary import TargetPlot
from autobinary.utils.folders import create_folder
st.set_option('deprecation.showPyplotGlobalUse', False)

st.set_page_config(page_title="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ EDA", page_icon="üìÇ")

st.markdown("# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ Exploratory Data Analysis (EDA)")
st.markdown("### üëà –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
st.sidebar.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ EDA")

@st.cache
def user_params():
    types = ['bin','reg','–≤—ã–±—Ä–∞—Ç—å']
    default_ind = types.index('–≤—ã–±—Ä–∞—Ç—å')
    type_target = st.sidebar.selectbox("–¢–∏–ø —Ç–∞—Ä–≥–µ—Ç–∞", types, default_ind)
    bins = st.sidebar.slider('–ß–∏—Å–ª–æ –±–∏–Ω–æ–≤',1,30,10)
    left_quant = st.sidebar.slider('–õ–µ–≤–æ–µ –æ—Ç—Å–µ—á–µ–Ω–∏–µ', 0.00,1.00,0.00)
    right_quant = st.sidebar.slider('–ü—Ä–∞–≤–æ–µ –æ—Ç—Å–µ—á–µ–Ω–∏–µ', 0.00,1.00,0.00)
    types = [True,False,'–≤—ã–±—Ä–∞—Ç—å']
    default_ind = types.index('–≤—ã–±—Ä–∞—Ç—å')
    log = st.sidebar.selectbox("–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞", types, default_ind)

    params = {
        'type_target':type_target,
        'bins':bins,
        'left_quant':left_quant,
        'right_quant':right_quant,
        'spec_value':False,
        'log':log}

    return params

params_eda = user_params()

@st.cache
def load_dataset(data_link):
    dataset = pd.read_csv(data_link)
    return dataset

use_columns = {'use':None,
                'target':None}

link = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç')
if link == '':
    st.write('–î–∞—Ç–∞—Å–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω')
    st.stop()
else:
    sample = load_dataset(link)
    st.write('–î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω')

##if st.button('–°—Ç–∞—Ä—Ç –æ–±—É—á–µ–Ω–∏—è'):
##    st.markdown('# –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω!')

    st.dataframe(sample.head())

    st.markdown('### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º')
    st.write('–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: ', sample.shape)

    check_nans = pd.DataFrame(sample.isna().sum()).rename(columns={0:'Nans'}).sort_values(by='Nans',ascending=False)
    check_nans['Nans_percent'] = (check_nans.Nans/len(sample))*100

    drop_columns = list(check_nans[check_nans.Nans_percent>95].index)
    st.write('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ >95%: ', len(drop_columns))
    st.dataframe(check_nans[check_nans.Nans_percent>95])

    st.markdown('## –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π')
    all_columns = sample.columns.tolist() + ['–≤—ã–±—Ä–∞—Ç—å']
    default_ind = all_columns.index('–≤—ã–±—Ä–∞—Ç—å')
    use_columns['target'] = st.selectbox("–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", all_columns, index=default_ind)

    cnt_columns = sample.select_dtypes(include=[int,float]).columns.tolist()+['–≤—ã–±—Ä–∞—Ç—å']
    default_ind = cnt_columns.index('–≤—ã–±—Ä–∞—Ç—å')
    use_columns['use'] = st.selectbox("–ß–∏—Å–ª–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", cnt_columns, index=default_ind)

    if use_columns['use']=='–≤—ã–±—Ä–∞—Ç—å' or use_columns['target']=='–≤—ã–±—Ä–∞—Ç—å':
        st.stop()
        st.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∏ —á–∏—Å–ª–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é')
    st.success(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —á–∏—Å–ª–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {use_columns['use']!r}")

    tt = TargetPlot(sample=sample,
                    feature=use_columns['use'],
                    target=use_columns['target'],
                    type_target=params_eda['type_target'],
                    bins=params_eda['bins'],
                    left_quant=params_eda['left_quant'],
                    right_quant=params_eda['right_quant'],
                    spec_value=params_eda['spec_value'],
                    log=params_eda['log']
                    )

    st.markdown('### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    st.dataframe(tt.get_bin_table())

    st.write("""
    #### –ö—Ä–∏–≤–∞—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    """)
    tt.get_target_plot()
    st.pyplot(bbox_inches='tight')

    useful_columns = list(set(sample.columns)-set(drop_columns))

    path = 'output'
    create_folder(path)
    pickle.dump(useful_columns,open('./{}/columns_after_eda.sav'.format(path), 'wb'))

    st.write('#### –§–∞–∫—Ç–æ—Ä—ã –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')

st.button("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
