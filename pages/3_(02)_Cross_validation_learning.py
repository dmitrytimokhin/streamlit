import streamlit as st
import pandas as pd
import numpy as np
import pickle

from sklearn.model_selection import train_test_split, StratifiedKFold, KFold, GroupKFold, GroupShuffleSplit
from sklearn.metrics import roc_auc_score, mean_squared_error, average_precision_score
import lightgbm as lgb
# –ù–∞—à–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
from autobinary import SentColumns, CatBoostEncoder, base_pipe, StratifiedGroupKFold, AutoTrees
st.set_option('deprecation.showPyplotGlobalUse', False)

st.set_page_config(page_title="–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞", page_icon="‚è≥")

st.markdown("# –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
st.markdown("### üëà –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")

st.sidebar.header("–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")

useful_columns = pickle.load(open('./output/columns_after_permutation.sav','rb'))
features = useful_columns['features']
num_columns = useful_columns['num_columns']
cat_columns = useful_columns['cat_columns']
target = useful_columns['target']

def load_dataset(data_link):
    dataset = pd.read_csv(data_link)
    return dataset

def user_params(need_columns):

    test_size = st.sidebar.slider('–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç—Ä–µ–π–Ω-—Ç–µ—Å—Ç', 0.1,1.0,0.3)
    random_state = st.sidebar.slider('–§–∞–∫—Ç–æ—Ä —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è', 1,100,42)

    train_test_params = {'test_size':test_size,
                        'random_state':random_state}

    return train_test_params

train_test_params = user_params(useful_columns)

link_2 = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç')
if link_2 == '':
    st.write('–î–∞—Ç–∞—Å–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω')
    st.stop()
else:
    sample = load_dataset(link_2)
    st.write('–î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω')

if st.button('–°—Ç–∞—Ä—Ç –æ–±—É—á–µ–Ω–∏—è'):
    st.markdown('# –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω!')

    st.write('### –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ–±—É—á–∞—é—â–µ–µ –∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏:',
    1-train_test_params['test_size'],'-',train_test_params['test_size'])

    X_train, X_valid, y_train, y_valid = train_test_split(
        sample,
        sample[target],
        test_size=train_test_params['test_size'],
        stratify=sample[target],
        random_state=train_test_params['random_state']
    )

    st.write(" * –†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞: ", len(X_train))
    st.write(" * –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞: ", len(X_valid))
    st.write("---")


    if len(num_columns)>0 and len(cat_columns)>0:
        prep_pipe = base_pipe(
            num_columns=num_columns,
            cat_columns=cat_columns,
            kind='all')

    elif len(num_columns)==0 and len(cat_columns)>0:
        prep_pipe = base_pipe(
            cat_columns=cat_columns,
            kind='cat')

    elif len(num_columns)>0 and len(cat_columns)==0:
        prep_pipe = base_pipe(
            num_columns=num_columns,
            kind='num')

    params = {
        'learning_rate':0.01,
        'n_estimators':1000,
        'subsample':0.9,
        'colsample_bytree':0.6,
        'max_depth':6,
        'objective':'binary',
        'n_jobs':-1,
        'random_state':train_test_params['random_state']
    }

    fit_params = {
        'early_stopping_rounds':100,
        'eval_metric':['logloss', 'auc'],
        'verbose':25}

    # —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ LightGBM
    lgb_model = lgb.LGBMClassifier(**params)

    # –∑–∞–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
    strat = StratifiedKFold(
        n_splits=5,
        shuffle=True,
        random_state=42)

    model = AutoTrees(
        main_estimator=lgb_model,
        main_fit_params=fit_params,
        main_prep_pipe = prep_pipe,
        main_features=features,

        X_train=X_train,
        y_train=y_train,
        main_metric='roc_auc',
        model_type = 'lightboost')

    model.model_fit_cv(strat=strat)

    st.write("### –°—Ä–µ–¥–Ω—è—è –º–µ—Ç—Ä–∏–∫–∞ –Ω–∞ –∫—Ä–æ—Å—Å - –≤–∞–ª–∏–¥–∞—Ü–∏–∏ = ", model.get_mean_cv_scores())
    st.write("---")
    st.write("–ö–æ–Ω—Ç—Ä–æ–ª—å –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Ñ–æ–ª–¥–∞—Ö")
    st.dataframe(model.get_extra_scores())
    st.write("---")
    st.write("–ó–Ω–∞—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø–æ –∫—Ä–æ—Å—Å - –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    st.dataframe(model.get_fi())
    st.write("---")

    st.markdown("##### –ó–Ω–∞—á–µ–Ω–∏–µ ROC - AUC –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–æ–ª–¥–∞—Ö")
    print(model.get_rocauc_plots())
    st.pyplot(bbox_inches='tight')
    st.write("---")

    st.write('### –û–±—É—á–µ–Ω–∏–µ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–æ—Å—Å - –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! ‚úÖ')

st.button("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
