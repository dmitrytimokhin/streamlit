import streamlit as st
import pandas as pd
import numpy as np
import pickle

from sklearn.model_selection import train_test_split, StratifiedKFold, KFold, GroupKFold, GroupShuffleSplit
from sklearn.metrics import roc_auc_score, mean_squared_error, average_precision_score
import lightgbm as lgb
# –ù–∞—à–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
from autobinary import SentColumns, CatBoostEncoder, base_pipe, BalanceCover
from autobinary.utils.folders import create_folder

st.set_option('deprecation.showPyplotGlobalUse', False)

st.set_page_config(page_title="–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏", page_icon="‚úÖ")

st.markdown("# –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏")
st.markdown("### üëà –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ BalanceCover –º–µ—Ä—Ç—Ä–∏–∫–∏")

st.sidebar.header("Optuna –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

useful_columns = pickle.load(open('./output/columns_after_optuna.sav','rb'))
features = useful_columns['features']
num_columns = useful_columns['num_columns']
cat_columns = useful_columns['cat_columns']
target = useful_columns['target']

final_params = pickle.load(open('./output/params_optuna.sav','rb'))

def load_dataset(data_link):
    dataset = pd.read_csv(data_link)
    return dataset

def user_params(need_columns):

    test_size = st.sidebar.slider('–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç—Ä–µ–π–Ω-—Ç–µ—Å—Ç', 0.1,1.0,0.3)
    random_state = st.sidebar.slider('–§–∞–∫—Ç–æ—Ä —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è (random_state)', 1,100,42)

    train_test_params = {'test_size':test_size,
                        'random_state':random_state}

    return train_test_params

train_test_params = user_params(useful_columns)

st.write('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤: ', len(features))
st.write('–û—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: ', features)

link_5 = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç')
if link_5 == '':
    st.write('–î–∞—Ç–∞—Å–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω')
    st.stop()
else:
    sample = load_dataset(link_5)
    st.write('–î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω')

#if st.button('–°—Ç–∞—Ä—Ç –æ–±—É—á–µ–Ω–∏—è'):
#    st.markdown('# –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω!')

    st.write('### –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ–±—É—á–∞—é—â–µ–µ –∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏:',
    1-train_test_params['test_size'],'-',train_test_params['test_size'])

    X_train, X_valid, y_train, y_valid = train_test_split(
        sample,
        sample[target],
        test_size=train_test_params['test_size'],
        stratify=sample[target],
        random_state=train_test_params['random_state']
    )

    st.write(" * –†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞: ", len(X_train))
    st.write(" * –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞: ", len(X_valid))
    st.write("---")

    if len(num_columns)>0 and len(cat_columns)>0:
        prep_pipe = base_pipe(
            num_columns=num_columns,
            cat_columns=cat_columns,
            kind='all')

    elif len(num_columns)==0 and len(cat_columns)>0:
        prep_pipe = base_pipe(
            cat_columns=cat_columns,
            kind='cat')

    elif len(num_columns)>0 and len(cat_columns)==0:
        prep_pipe = base_pipe(
            num_columns=num_columns,
            kind='num')

    prep_pipe.fit(X_train[features], y_train)

    X_train_final = prep_pipe.transform(X_train[features])
    X_valid_final = prep_pipe.transform(X_valid[features])

    model_final = lgb.LGBMClassifier(**final_params)
    model_final.fit(X_train_final, y_train)

    # –ö–∞—Å—Ç–æ–º–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞

    metric_train = pd.DataFrame()
    metric_train['target'] = y_train
    metric_train['proba'] = model_final.predict_proba(X_train_final)[:, 1]
    metric_train = metric_train.sort_values('proba', ascending=False).reset_index(drop=True)

    metric_valid = pd.DataFrame()
    metric_valid['target'] = y_valid
    metric_valid['proba'] = model_final.predict_proba(X_valid_final)[:, 1]
    metric_valid = metric_valid.sort_values('proba', ascending=False).reset_index(drop=True)

    metr_train = BalanceCover(metric_train, target='target')

    st.write("–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞:", X_train_final.shape)
    st.write("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞—Ä–≥–µ—Ç–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏:", y_train.sum())

    st.markdown("#### BalanceCover –¥–ª—è –æ–±—É—á–∞—é—â–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞")
    bin_min_tr = st.text_input("–®–∞–≥ –±–∏–Ω–∞ (—Ç—Ä–µ–π–Ω)")
    bin_max_tr = st.text_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π (—Ç—Ä–µ–π–Ω)")

    if bin_min_tr=='' or bin_max_tr=='':
        st.warning('–ó–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã BalanceCover')
        st.stop()
    else:
        metr_train.calc_scores(int(bin_min_tr), int(bin_max_tr))

    st.write('–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Ç—Ä–µ–π–Ω–µ')
    metr_train.plot_scores()
    st.pyplot(bbox_inches='tight')
    st.write('---')
    st.write('–¢–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ')
    st.write(metr_train.output)


    metr_valid = BalanceCover(metric_valid, target='target')

    st.write("–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞:", X_valid_final.shape)
    st.write("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞—Ä–≥–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–µ:", y_valid.sum())

    st.markdown("#### BalanceCover –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞")
    bin_min_te = st.text_input("–®–∞–≥ –±–∏–Ω–∞ (—Ç–µ—Å—Ç)")
    bin_max_te = st.text_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π (—Ç–µ—Å—Ç)")

    if bin_min_te=='' or bin_max_te=='':
        st.warning('–ó–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã BalanceCover')
        st.stop()
    else:
        metr_valid.calc_scores(int(bin_min_te), int(bin_max_te))

    st.write('–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–µ')
    metr_valid.plot_scores()
    st.pyplot(bbox_inches='tight')
    st.write('---')
    st.write('–¢–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ')
    st.write(metr_train.output)

    path = 'final_results'

    create_folder(path)
    pickle.dump(prep_pipe,open('./{}/prep_pipe_final.sav'.format(path), 'wb'))
    pickle.dump(num_columns,open('./{}/num_columns_final.sav'.format(path), 'wb'))
    pickle.dump(cat_columns,open('./{}/cat_columns_final.sav'.format(path), 'wb'))
    pickle.dump(model_final,open('./{}/model_final.sav'.format(path), 'wb'))

    st.write('### –§–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω! ‚úÖ')

st.button("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
